import { Component, EventEmitter, Input, Output } from '@angular/core';
import { NetworkDevice } from '../../interfaces/network.interface';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-network-details',
  imports: [CommonModule],
  templateUrl: './network-details.component.html',
  styleUrl: './network-details.component.scss'
})
export class NetworkDetailsComponent {
  @Input() device: NetworkDevice | null = null;
  @Output() close = new EventEmitter<void>();

  getDeviceTypeName(type: string): string {
    const names: { [key: string]: string } = {
      endpoint: '–ö–æ–Ω–µ—á–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      router: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä',
      switch: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä',
      firewall: '–§–∞–π—Ä–≤–æ–ª',
      iot: 'IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      server: '–°–µ—Ä–≤–µ—Ä'
    };
    return names[type] || type;
  }

  getDeviceIcon(type: string): string {
    const icons: { [key: string]: string } = {
      endpoint: 'üíª',
      router: 'üåê',
      switch: 'üîå',
      firewall: 'üõ°Ô∏è',
      iot: 'üì±',
      server: 'üñ•Ô∏è'
    };
    return icons[type] || '‚ùì';
  }

  getStatusName(status: string): string {
    const names: { [key: string]: string } = {
      online: '–í —Å–µ—Ç–∏',
      offline: '–ù–µ –≤ —Å–µ—Ç–∏',
      warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      maintenance: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
    };
    return names[status] || status;
  }

  getSpeedPercentage(speed: number): number {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 1 Gbps
    return (speed / 1000) * 100;
  }

  onClose() {
    this.close.emit();
  }
}
